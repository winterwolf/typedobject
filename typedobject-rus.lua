--------------------------------------------------------------------------------
-- Typed Object
--------------------------------------------------------------------------------
-- version: 1.0.0 (with russian comments).
-- license: MIT.
-- Inspired by minimalism of lua-oo (https://github.com/limadm/lua-oo)
-- and functionality of middleclass (https://github.com/kikito/middleclass).
-- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç "–æ–±—ä–µ–∫—Ç", –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –û–û–ü —Å
-- –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π. –í –±—É–¥—É—â–µ–º —è —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–∏–∫—Ä—É—Ç–∏—Ç—å
-- –∫ —Ç–∞–π–ø—á–µ–∫—É –µ—â—ë –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –Ω—ë–º,
-- –Ω–æ —ç—Ç–æ –Ω–µ —Å–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ ü§®.

local errorLevelDefault = 2
local errorLevel = errorLevelDefault

-- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ "production",
-- –∑–∞–º–µ–Ω—è—é—â–∞—è —Å–æ–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã.
local function doNothing(...) return ... end

-- –ü–µ—Ä–≤–æ—Ä–æ–¥–Ω—ã–π —Ç–∏–ø.
-- –ü—Ä–∏ –≤—ã–∑–æ–≤–µ üß∫Object –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–∏, –µ–º—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
-- * production [false]: —Ä–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
--   –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.
local Object = {init = doNothing}

-- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π —Ç–∏–ø–æ–≤.
local types = {[Object] = {[Object] = true}}

-- –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∏ –∏—Ö –∏–º–µ–Ω–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π.
local typesByNames = {["Object"] = Object}

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ–±—ä–µ–∫—Ç–∞.
local extraTypes = {}

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞.
local function objectTypesCheck(var, expected, got)
  if got ~= "table" then return false end
  got = types[var] -- –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å!
  if not got then return false end
  if type(expected) == "table" and got[expected] then return true
  elseif type(expected) == "string" and got[typesByNames[expected]] then
    return true
  end
  return false
end

-- –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å–µ–±–µ –∏ –≤—Å–µ–º —Å–≤–æ–∏–º —Å—É–ø–µ—Ä-–∫–ª–∞—Å—Å–∞–º.
local function superCall(self, func, ...)
  func(self, ...)
  if self.super then superCall(self.super, func, ...) end
end

-- –ò—â–µ—Ç —É —Å–µ–±—è –ø–æ–ª—è —Å "__" –≤ –∫–æ–Ω—Ü–µ.
-- –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É mt –≤—Å–µ —ç—Ç–∏ –ø–æ–ª—è, –Ω–æ c "__" –≤ –Ω–∞—á–∞–ª–µ.
-- –ù–µ –º–µ–Ω—è–µ—Ç mt –µ—Å–ª–∏ –≤ mt —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ –∏ "__" –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—á–∞–ª–µ.
-- –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç index.
local function replace__methods(self, mt)
  for k, v in pairs(self) do
    local found = k:find("__")
    if found == #k-1 then
      local name = k:sub(1, #k-2)
      if name ~= "index" then mt["__" .. name] = v end
    elseif found == 1 then
      mt[k] = mt[k] or v
    end
  end
end

-- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–º –∏–ª–∏ –ø–æ–¥—Ç–∏–ø–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
-- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏ (—Å—Ç—Ä–æ–∫–∞–º–∏) –ª–∏–±–æ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ —Ç–∏–ø–æ–≤.
-- –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
-- –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ç–∏–ø –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É.
-- –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–æ–∫–∏ (`\n`),
-- —Ç–æ –æ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –Ω–µ –∫–∞–∫ —Ç–∏–ø, –∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ.
-- –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç false, —Ç–æ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
-- –í —Ä–µ–∂–∏–º–µ production –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ doNothing.
local function typeAssert(var, ...)
  local checks = {...}
  local lastCheckIndex = #checks
  local got = type(var)
  local message = ""
  local lastCheck = checks[lastCheckIndex]
  local emptyMsg = "Empty assertion detected!"
  if lastCheck == "\n!" then
    message = false
    checks[lastCheckIndex] = nil
  elseif type(lastCheck) == "string" and
    string.sub(lastCheck, 1, 1) == "\n" then
    message = lastCheck
    checks[lastCheckIndex] = nil
  end
  if #checks == 0 then
    error(emptyMsg, errorLevel)
  end
  for _, expected in ipairs(checks) do
    if expected == got or expected == var then return true end
    if objectTypesCheck(var, expected, got) then return true end
    for _, check in ipairs(extraTypes) do
      if check(var, expected, got) then return true end
    end
  end
  if not message then return false end
  for i, check in ipairs(checks) do
    if type(check) == "table" then
      checks[i] = getmetatable(check).typename
    end
  end
  local expected
  for index, value in ipairs(checks) do checks[index] = tostring(value) end
  expected = table.concat(checks, " or ")
  if expected == "" or var == nil then
    error(emptyMsg .. message, errorLevel)
  end
  local value = tostring(var)
  error(expected .. " expected, got " .. got ..
  ": " .. value .. message, errorLevel)
end

-- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–º –∏–ª–∏ –ø–æ–¥—Ç–∏–ø–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
-- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏ (—Å—Ç—Ä–æ–∫–∞–º–∏) –ª–∏–±–æ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ —Ç–∏–ø–æ–≤.
-- –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
-- –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
-- –í —Ä–µ–∂–∏–º–µ production –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, —Ç–∞–∫ —á—Ç–æ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ.
local function is(var, ...)
  for _, expected in ipairs({...}) do
    if not typeAssert(var, expected, "\n!") then return false end
  end
  return true
end

-- –°–æ–∑–¥–∞—ë—Ç üéÅobj: —ç–∫–∑–µ–º–ø–ª—è—Ä üìúself.
-- üìúself —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–º –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü—ã –¥–ª—è üéÅobj
-- (–Ω–æ –æ–Ω–∏ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ is —á–µ—Ä–µ–∑ –∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è).
local function new(self, param, ...)
  local obj
  local mt = {
    __tostring = function() return "üéÅ" .. getmetatable(self).typename end
  }
  -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π index –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
  if self.index__ then
    self.__index = function(this, key)
      -- print("DEBUG", self, this, key)
      return self.index__(this, key) or self[key] or rawget(this, key)
    end
  end
  superCall(self, replace__methods, mt)
  if not ... and type(param) == "table" then
    obj = setmetatable(param, mt)
    obj:init()
  else
    obj = setmetatable({}, mt)
    obj:init(param, ...)
  end
  return obj
end

-- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –≤–Ω—É—Ç—Ä–∏ extend.
local function checksInExtend(base, name)
  local errorNoName = "Please provide a name for the new type!"
  if not name then
    errorLevel = errorLevelDefault + 2
    typeAssert(base, Object,
      "\nMake sure you are using `Object:extend`, not `Object.extend`!")
    error(errorNoName, errorLevelDefault + 1)
  end
  typeAssert(name, "string", "table", "\n" .. errorNoName)
  errorLevel = errorLevelDefault
end

-- –°–æ–∑–¥–∞—ë—Ç üìúsub: –ø–æ–¥–∫–ª–∞—Å—Å üìúbase.
-- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø–æ–¥–º–µ—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã,
-- –ø–æ–∑–≤–æ–ª—è—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
-- –í —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–º–µ—à–∏–≤–∞–Ω–∏–µ.
local function extend(base, name, ...)
  if type(name) == "table" then
    local name__ = name.name__
    name.name__ = nil
    return extend(base, name__, name)
  end
  checksInExtend(base, name)
  local sub = {init = base.init}
  -- –û–±—ä—è–≤–ª—è–µ–º —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å—ã –∏ –∏–º—è –¥–ª—è üìúsub.
  types[sub] = {[sub] = true}
  if typesByNames[name] then
    error("type name `" .. name .. "` already existed", 2)
  end
  typesByNames[name] = sub
  for t in pairs(types[base]) do types[sub][t] = true end
  -- –ü–æ–¥–º–µ—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ üìúsub.
  for _, extra in ipairs{...} do
    types[sub][extra] = true
    for k, v in pairs(extra) do sub[k] = v end
  end
  -- –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫–∏ –≤ üìúsub.
  sub.super    = base   -- –°—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ üìúbase –∫–∞–∫ –Ω–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å.
  sub.extend   = extend -- –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
  sub.__index  = sub    -- –î–ª—è üéÅsub –º–µ—Ç–∞–∏–Ω–¥–µ–∫—Å–æ–º –±—É–¥–µ—Ç üìúsub.
  -- –ü–æ–∑–≤–æ–ª—è–µ–º üìúsub –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω –∫–ª–∞—Å—Å—É –∏–ª–∏ –ø–æ–¥–∫–ª–∞—Å—Å—É.
  function sub:is(...) return is(sub, ...) end
  local mt = {
    __call  = new, -- –ü—Ä–∏ –≤—ã–∑–æ–≤–µ üìúsub —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
    __index = base, -- –ú–µ—Ç–∞–∏–Ω–¥–µ–∫—Å üìúsub —ç—Ç–æ –µ–≥–æ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å.
    __tostring = function() return "üìú" .. name end,
    typename = name,
  }
  return setmetatable(sub, mt)
end

Object.is = is
Object.extend = extend
Object.assert = typeAssert
Object.asserts = function(vars, ...)
  for _, var in ipairs(vars) do typeAssert(var, ...) end
end


setmetatable(Object, {
  __tostring = function() return "üß∫Object" end,
  __call = function(self, opt)
    opt = opt or {}
    if opt.production then
      self.assert    = doNothing
      self.asserts   = doNothing
      checksInExtend = doNothing
    end
    if opt.extraTypes then extraTypes = opt.extraTypes end
    return self
  end,
})

return Object
